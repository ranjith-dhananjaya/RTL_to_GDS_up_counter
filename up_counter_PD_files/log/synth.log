Qflow synthesis logfile created on Tue Dec 10 20:39:46 MST 2024
Running yosys for verilog parsing and synthesis
yosys  -s up_counter.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `up_counter.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v' to AST representation.
Generating RTLIL representation for module `\up_counter'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \up_counter

3.1.2. Analyzing design hierarchy..
Top module:  \up_counter
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\up_counter.$proc$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:25$1'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\up_counter.$proc$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:25$1'.
     1/1: $0\out[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\up_counter.\out' using process `\up_counter.$proc$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:25$1'.
  created $adff cell `$procdff$6' with positive edge clock and positive level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\up_counter.$proc$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:25$1'.
Removing empty process `up_counter.$proc$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:25$1'.
Cleaned up 1 empty switch.

3.3. Executing OPT_EXPR pass (perform const folding).

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.5. Executing CHECK pass (checking for obvious problems).
checking module up_counter..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$4 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell up_counter.$add$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:31$2 ($add).
Removed top 24 bits (of 32) from port Y of cell up_counter.$add$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:31$2 ($add).
Removed top 24 bits (of 32) from wire up_counter.$add$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:31$2_Y.

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module up_counter:
  creating $macc model for $add$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:31$2 ($add).
  creating $alu model for $macc $add$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:31$2.
  creating $alu cell for $add$/home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/source/up_counter.v:31$2: $auto$alumacc.cc:470:replace_alu$8
  created 1 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$4 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$4 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 8
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8'.

3.18.3. Continuing TECHMAP pass.
Mapping up_counter.$auto$alumacc.cc:470:replace_alu$8 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8.
Mapping up_counter.$procmux$4 ($mux) with simplemap.
Mapping up_counter.$procdff$6 ($adff) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58 ($xor) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:263$59 ($xor) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57 ($and) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=8'.

3.18.5. Executing PROC pass (convert processes to netlists).

3.18.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.5.3. Executing PROC_INIT pass (extract init attributes).

3.18.5.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$118'.
     1/16: $0\p[7:0] [6]
     2/16: $0\g[7:0] [6]
     3/16: $0\p[7:0] [4]
     4/16: $0\g[7:0] [4]
     5/16: $0\p[7:0] [2]
     6/16: $0\g[7:0] [2]
     7/16: $0\p[7:0] [5]
     8/16: $0\g[7:0] [5]
     9/16: $0\p[7:0] [7]
    10/16: $0\g[7:0] [7]
    11/16: $0\p[7:0] [3]
    12/16: $0\g[7:0] [3]
    13/16: $0\p[7:0] [1]
    14/16: $0\g[7:0] [1]
    15/16: $0\g[7:0] [0]
    16/16: $0\p[7:0] [0]

3.18.5.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\p' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$118'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\g' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$118'.

3.18.5.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$118'.
Cleaned up 0 empty switches.

3.18.6. Executing OPT pass (performing simple optimizations).

3.18.6.1. Executing OPT_EXPR pass (perform const folding).

3.18.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=8'.
Removed a total of 0 cells.

3.18.6.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=8..
  removing unused `$and' cell `$and$<techmap.v>:222$123'.
  removing unused `$and' cell `$and$<techmap.v>:222$135'.
  removing unused `$and' cell `$and$<techmap.v>:222$141'.
  removing unused `$and' cell `$and$<techmap.v>:230$144'.
  removing unused `$and' cell `$and$<techmap.v>:230$147'.
  removing unused `$and' cell `$and$<techmap.v>:230$150'.
  removing unused `$and' cell `$and$<techmap.v>:230$153'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.6.5. Finished fast OPT passes.

3.18.7. Continuing TECHMAP pass.
Mapping up_counter.$auto$alumacc.cc:470:replace_alu$8.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56 ($mux) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.$not$<techmap.v>:258$55 ($not) with simplemap.
Mapping up_counter.$auto$alumacc.cc:470:replace_alu$8.B_conv ($pos) with simplemap.
Mapping up_counter.$auto$alumacc.cc:470:replace_alu$8.A_conv ($pos) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:212$119 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$121 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$124 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$127 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$130 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$133 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$136 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$139 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:222$126 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:222$129 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:222$132 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:222$138 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:229$142 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:229$145 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:229$148 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:229$151 ($and) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:212$120 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$122 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$125 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$128 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$131 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$134 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$137 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$140 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:229$143 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:229$146 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:229$149 ($or) with simplemap.
Mapping up_counter.$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:229$152 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$154' (??0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56_Y [0] = \out [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$155' (??0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56_Y [1] = \out [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$77' (0?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58_Y [1] = \out [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$156' (??0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56_Y [2] = \out [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$78' (0?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58_Y [2] = \out [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$84' (?0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:263$59_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$93' (1?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57_Y [0] = \out [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$170' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:212$119_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$186' (?0) in module `\up_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$10 [0] = \out [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$94' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$187' (0?) in module `\up_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$10 [1] = $techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$121_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$157' (??0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56_Y [3] = \out [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$79' (0?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58_Y [3] = \out [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$95' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$195' (0?) in module `\up_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$10 [2] = $techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:229$145_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$158' (??0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56_Y [4] = \out [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$80' (0?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58_Y [4] = \out [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$96' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$172' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$124_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$188' (00) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$125_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$191' (0?) in module `\up_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$10 [3] = $techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$133_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$159' (??0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56_Y [5] = \out [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$81' (0?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58_Y [5] = \out [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$97' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$196' (0?) in module `\up_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$10 [4] = $techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:229$148_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$160' (??0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56_Y [6] = \out [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$82' (0?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58_Y [6] = \out [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$98' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$173' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$127_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$189' (00) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$128_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$194' (0?) in module `\up_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$10 [5] = $techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:229$142_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$161' (??0) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$ternary$<techmap.v>:258$56_Y [7] = \out [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$83' (0?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:262$58_Y [7] = \out [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$99' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$197' (0?) in module `\up_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$10 [6] = $techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:229$151_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$176' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$136_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$100' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$and$<techmap.v>:260$57_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$174' (const_and) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$130_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$190' (00) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$131_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$192' (00) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$or$<techmap.v>:221$137_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$193' (0?) in module `\up_counter' with constant driver `$auto$alumacc.cc:484:replace_alu$10 [7] = $techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$139_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$92' (0?) in module `\up_counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$8.$xor$<techmap.v>:263$59_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$8.lcu.$and$<techmap.v>:221$139_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$162'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$163'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$164'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$165'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$166'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$167'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$168'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$169'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$177'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$180'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$181'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\up_counter' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 34 wires to a netlist network with 9 inputs and 8 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:               MUX cells:        7
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               XOR cells:        8
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$198$auto$blifparse.cc:286:parse_blif$202' in module `up_counter'.
Optimizing away select inverter for $_MUX_ cell `$abc$198$auto$blifparse.cc:286:parse_blif$215' in module `up_counter'.
Optimizing away select inverter for $_MUX_ cell `$abc$198$auto$blifparse.cc:286:parse_blif$219' in module `up_counter'.
Optimizing away select inverter for $_MUX_ cell `$abc$198$auto$blifparse.cc:286:parse_blif$205' in module `up_counter'.
Optimizing away select inverter for $_MUX_ cell `$abc$198$auto$blifparse.cc:286:parse_blif$208' in module `up_counter'.
Optimizing away select inverter for $_MUX_ cell `$abc$198$auto$blifparse.cc:286:parse_blif$212' in module `up_counter'.
Optimizing away select inverter for $_MUX_ cell `$abc$198$auto$blifparse.cc:286:parse_blif$222' in module `up_counter'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..
  removing unused `$_NOT_' cell `$abc$198$auto$blifparse.cc:286:parse_blif$200'.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \up_counter

3.22.2. Analyzing design hierarchy..
Top module:  \up_counter
Removed 0 unused modules.

3.23. Printing statistics.

=== up_counter ===

   Number of wires:                 28
   Number of wire bits:             42
   Number of public wires:          12
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_AND_                          8
     $_DFF_PP0_                      8
     $_MUX_                          7
     $_XOR_                          8

3.24. Executing CHECK pass (checking for obvious problems).
checking module up_counter..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\up_counter':
  mapped 8 $_DFF_PP0_ cells to \DFFSR cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
  Cell `$auto$dfflibmap.cc:511:dfflibmap$223' is identical to cell `$auto$dfflibmap.cc:511:dfflibmap$237'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$224 = $auto$rtlil.cc:1731:NotGate$238
    Removing $_NOT_ cell `$auto$dfflibmap.cc:511:dfflibmap$223' from module `\up_counter'.
  Cell `$auto$dfflibmap.cc:511:dfflibmap$225' is identical to cell `$auto$dfflibmap.cc:511:dfflibmap$237'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$226 = $auto$rtlil.cc:1731:NotGate$238
    Removing $_NOT_ cell `$auto$dfflibmap.cc:511:dfflibmap$225' from module `\up_counter'.
  Cell `$auto$dfflibmap.cc:511:dfflibmap$227' is identical to cell `$auto$dfflibmap.cc:511:dfflibmap$237'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$228 = $auto$rtlil.cc:1731:NotGate$238
    Removing $_NOT_ cell `$auto$dfflibmap.cc:511:dfflibmap$227' from module `\up_counter'.
  Cell `$auto$dfflibmap.cc:511:dfflibmap$229' is identical to cell `$auto$dfflibmap.cc:511:dfflibmap$237'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$230 = $auto$rtlil.cc:1731:NotGate$238
    Removing $_NOT_ cell `$auto$dfflibmap.cc:511:dfflibmap$229' from module `\up_counter'.
  Cell `$auto$dfflibmap.cc:511:dfflibmap$231' is identical to cell `$auto$dfflibmap.cc:511:dfflibmap$237'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$232 = $auto$rtlil.cc:1731:NotGate$238
    Removing $_NOT_ cell `$auto$dfflibmap.cc:511:dfflibmap$231' from module `\up_counter'.
  Cell `$auto$dfflibmap.cc:511:dfflibmap$233' is identical to cell `$auto$dfflibmap.cc:511:dfflibmap$237'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$234 = $auto$rtlil.cc:1731:NotGate$238
    Removing $_NOT_ cell `$auto$dfflibmap.cc:511:dfflibmap$233' from module `\up_counter'.
  Cell `$auto$dfflibmap.cc:511:dfflibmap$235' is identical to cell `$auto$dfflibmap.cc:511:dfflibmap$237'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$236 = $auto$rtlil.cc:1731:NotGate$238
    Removing $_NOT_ cell `$auto$dfflibmap.cc:511:dfflibmap$235' from module `\up_counter'.
Removed a total of 7 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\up_counter' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 34 wires to a netlist network with 10 inputs and 9 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        2
ABC RESULTS:             INVX1 cells:        5
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        9
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 35 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port up_counter.clk: Missing option -inpad.
Don't map input port up_counter.enable: Missing option -inpad.
Mapping port up_counter.out0 using BUFX2.
Mapping port up_counter.out1 using BUFX2.
Mapping port up_counter.out2 using BUFX2.
Mapping port up_counter.out3 using BUFX2.
Mapping port up_counter.out4 using BUFX2.
Mapping port up_counter.out5 using BUFX2.
Mapping port up_counter.out6 using BUFX2.
Mapping port up_counter.out7 using BUFX2.
Don't map input port up_counter.reset: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \up_counter..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

11. Printing statistics.

=== up_counter ===

   Number of wires:                 41
   Number of wire bits:             48
   Number of public wires:          41
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 45
     AND2X2                          2
     AOI21X1                         2
     BUFX2                           8
     DFFSR                           8
     INVX1                           5
     NAND2X1                         4
     NAND3X1                         3
     NOR2X1                          8
     NOR3X1                          1
     OAI21X1                         1
     XNOR2X1                         3

End of script. Logfile hash: 1c5c967295
CPU: user 0.03s system 0.07s, MEM: 36.89 MB total, 9.84 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 20% 1x share (0 sec), 13% 15x opt_clean (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl up_counter_mapped.blif up_counter /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I up_counter_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif up_counter.blif

blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 8 (load 301.138) from node _10_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.92945 (latency = 585.89 ps)
Top input node fanout is 8 (load 107.575) from node clk.
Warning 1: load of 127.01 is 1.24237 times greater than strongest gate NAND2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 212.895 is 2.0687 times greater than strongest gate DFFSR
Warning 3: load of 269.439 is 2.61814 times greater than strongest gate DFFSR
9 gates exceed specified minimum load.
0 buffers were added.
1 gates were changed.

Gate counts by drive strength:

	"" gates	In: 8    	Out: 8    	+0
	"1" gates	In: 27    	Out: 26    	-1
	"2" gates	In: 10    	Out: 10    	+0

Number of gates changed: 1
gates resized: 1
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 8 (load 346.385) from node _10_,
driven by INVX4 with strength 417.401 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.52097 (latency = 504.194 ps)
Top input node fanout is 8 (load 107.575) from node clk.
Warning 1: load of 127.01 is 1.24237 times greater than strongest gate NAND2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 212.895 is 2.0687 times greater than strongest gate DFFSR
Warning 3: load of 269.439 is 2.61814 times greater than strongest gate DFFSR
9 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 8    	Out: 8    	+0
	"1" gates	In: 26    	Out: 26    	+0
	"2" gates	In: 10    	Out: 10    	+0
	"4" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/synthesis
Files:
   Verilog: /home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/synthesis/up_counter.rtl.v
   Verilog: /home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/synthesis/up_counter.rtlnopwr.v
   Verilog: /home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/synthesis/up_counter.rtlbb.v
   Spice:   /home/ranjithd1998/vsdflow/vsdflow/rtl2gds_up_counter_try2/synthesis/up_counter.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" up_counter.spc up_counter.xspice

Synthesis script ended on Tue Dec 10 20:39:47 MST 2024
